{"version":3,"file":"static/js/506.c3010ac6.chunk.js","mappings":"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","sources":["components/FormContacts/FormContacts.styled.js","redux/selectors.js","components/FormContacts/FormContacts.js","components/ContactList/ContactList.js","components/FilterContacts/FilterContacts.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 500px;\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  flex-direction: column;\n  margin: 30px auto;\n  position: relative;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: rgba(60, 64, 67, 0.5) 0px 2px 5px 0px,\n    rgba(60, 64, 67, 0.3) 0px 2px 5px 2px;\n  border-color: #2a363b;\n  background-color: white;\n`;\n","export const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter.text;\n","import { useState } from 'react';\nimport { Form } from './FormContacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { TextField, Button } from '@mui/material';\nimport { RiUserAddLine } from 'react-icons/ri';\nimport { selectContacts } from 'redux/selectors';\nimport { toast } from 'react-toastify';\n\nexport default function FormContacts() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name.trim())) {\n      toast.error(`There is already such contact as ${name}`, {\n        icon: '⛔',\n      });\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    toast.success(`${name} added to contacts`, { icon: '☑️' });\n    resetForm();\n  };\n\n  return (\n    <Form onSubmit={handleAddContact}>\n      <TextField\n        value={name}\n        onChange={handleChange}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"off\"\n        placeholder=\"Enter contact name\"\n        margin={'normal'}\n        label=\"Name\"\n      />\n\n      <TextField\n        value={number}\n        onChange={handleChange}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        autoComplete=\"off\"\n        placeholder=\"000-000-000\"\n        label=\"Number\"\n        margin={'normal'}\n      />\n\n      <Button\n        type=\"submit\"\n        size=\"large\"\n        sx={{ mt: 3, border: '1px solid purple' }}\n        endIcon={<RiUserAddLine size={24} />}\n      >\n        Add contact\n      </Button>\n    </Form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchContacts,\n  deleteContact,\n} from 'redux/contacts/contacts-operations';\nimport { useEffect } from 'react';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { List, ListItem, Avatar, Typography, IconButton } from '@mui/material';\nimport { MdDelete } from 'react-icons/md';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const { contacts, isLoading, error } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const getFirstLetter = name => {\n    return name.charAt(0).toUpperCase();\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <List sx={{ padding: '10px' }}>\n      {isLoading}\n      {error && <p>{error}</p>}\n      {contacts.length > 0 && (\n        <Typography\n          sx={{ padding: '10px' }}\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          maxWidth={500}\n          margin=\"auto\"\n          variant=\"h5\"\n        >\n          Total contacts: {contacts.length}\n        </Typography>\n      )}\n      {contacts.length > 0 &&\n        filteredContacts.map(({ id, name, number }) => (\n          <ListItem\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              maxWidth: 500,\n              margin: 'auto',\n            }}\n            key={id}\n            divider\n          >\n            <Avatar sx={{ bgcolor: 'purple' }}>{getFirstLetter(name)}</Avatar>\n            <Typography variant=\"h5\">\n              {name}:{number}\n            </Typography>\n            <IconButton\n              aria-label=\"delete\"\n              color=\"secondary\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              <MdDelete />\n            </IconButton>\n          </ListItem>\n        ))}\n    </List>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filter-slice';\nimport { selectFilter } from 'redux/selectors';\nimport { TextField, Box } from '@mui/material';\n\nexport default function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Box\n      sx={{ padding: '20px' }}\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      maxWidth={500}\n      margin=\"auto\"\n    >\n      <TextField\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n        placeholder=\"Name\"\n        variant=\"outlined\"\n        label=\"Filter contacts by name\"\n      />\n    </Box>\n  );\n}\n","import React from 'react';\nimport FormContacts from '../../components/FormContacts/FormContacts';\nimport ContactList from '../../components/ContactList/ContactList';\nimport FilterContacts from '../../components/FilterContacts/FilterContacts';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nexport default function ContactPage() {\n  const { contacts } = useSelector(selectContacts);\n  return (\n    <>\n      <FormContacts />\n      {contacts.length > 0 && <FilterContacts />}\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Form","styled","selectContacts","state","contacts","selectFilter","filter","text","FormContacts","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","onSubmit","preventDefault","find","contact","trim","toast","icon","addContact","TextField","onChange","type","pattern","title","required","autoComplete","placeholder","margin","label","Button","size","sx","mt","border","endIcon","ContactList","isLoading","error","useEffect","fetchContacts","getFirstLetter","charAt","toUpperCase","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","List","padding","length","Typography","display","justifyContent","alignItems","flexDirection","maxWidth","variant","map","id","ListItem","divider","Avatar","bgcolor","IconButton","color","onClick","deleteContact","Filter","Box","updateFilter","ContactPage"],"sourceRoot":""}